---
# Prometheus Alert Rules for Idempotency System
# Deploy to: /etc/prometheus/rules.d/idempotency_alerts.yaml

groups:
  - name: idempotency_system_alerts
    interval: 1m
    rules:
      # Alert 1: Job Completion Rate Below Threshold
      - alert: IdempotencyJobCompletionRateLow
        expr: |
          (
            SELECT CAST(SUM(CASE WHEN state IN ('FINALIZED', 'INDEXED', 'DEDUPED') THEN 1 ELSE 0 END) AS FLOAT)
            / CAST(COUNT(*) AS FLOAT)
            FROM artifact_jobs
            WHERE created_at > datetime('now', '-1 hour')
          ) < 0.99
        for: 5m
        labels:
          severity: critical
          service: idempotency
        annotations:
          summary: "Job completion rate below 99% ({{ $value | humanizePercentage }})"
          description: |
            The idempotency system's job completion rate has dropped below the SLO target of 99.5%.
            Current: {{ $value | humanizePercentage }}
            Target: 99.5%

            Actions:
            1. Check manifest.sqlite3 for job state distribution
            2. Run: SELECT state, COUNT(*) FROM artifact_jobs GROUP BY state
            3. Verify idempotency feature gate is enabled
            4. Check for stale leases: SELECT COUNT(*) FROM artifact_jobs WHERE lease_until < datetime('now')

      # Alert 2: Stale Leases Detected
      - alert: IdempotencyStaleLeasesDetected
        expr: |
          (
            SELECT COUNT(*)
            FROM artifact_jobs
            WHERE lease_until < datetime('now') AND lease_owner IS NOT NULL
          ) > 0
        for: 5m
        labels:
          severity: warning
          service: idempotency
        annotations:
          summary: "Stale leases detected (count: {{ $value }})"
          description: |
            One or more jobs have stale leases (lease_until < now).
            This indicates worker crashes or network partitions.

            Actions:
            1. Run reconciler: python -c "
               import sqlite3
               from DocsToKG.ContentDownload.job_reconciler import reconcile_stale_leases
               conn = sqlite3.connect('manifest.sqlite3')
               recovered = reconcile_stale_leases(conn)
               print(f'Recovered {recovered} stale leases')
               "
            2. Verify workers are running and healthy
            3. Check worker logs for crashes or network errors
            4. Monitor recovery process

      # Alert 3: High Operation Replay Rate
      - alert: IdempotencyHighReplayRate
        expr: |
          (
            SELECT CAST(COUNT(CASE WHEN result_json IS NOT NULL THEN 1 END) AS FLOAT)
            / CAST(COUNT(*) AS FLOAT)
            FROM artifact_ops
            WHERE started_at > datetime('now', '-1 hour')
          ) > 0.10
        for: 10m
        labels:
          severity: warning
          service: idempotency
        annotations:
          summary: "Operation replay rate high ({{ $value | humanizePercentage }})"
          description: |
            The operation replay rate has exceeded 10% (healthy target: <5%).
            High replays indicate frequent retries or crashes.

            Current: {{ $value | humanizePercentage }}
            Target: < 5%
            Error Budget: ± 10%

            Actions:
            1. Check retry logs for patterns
            2. Analyze operation types being replayed:
               SELECT op_type, COUNT(*) FROM artifact_ops
               WHERE result_json IS NOT NULL GROUP BY op_type
            3. Review network stability (packet loss, timeouts)
            4. Check rate limiter settings for aggressive throttling
            5. Verify timeout configurations are appropriate

      # Alert 4: SLO Error Budget Exhaustion
      - alert: IdempotencySLOBudgetLow
        expr: |
          (
            (
              SELECT CAST(SUM(CASE WHEN state IN ('FINALIZED', 'INDEXED', 'DEDUPED') THEN 1 ELSE 0 END) AS FLOAT)
              / CAST(COUNT(*) AS FLOAT)
              FROM artifact_jobs
              WHERE created_at > datetime('now', '-1 day')
            )
            - 0.995  -- JOB_COMPLETION_RATE_TARGET
          ) > 0.005  -- Error budget reached
        for: 10m
        labels:
          severity: warning
          service: idempotency
          slo: job_completion_rate
        annotations:
          summary: "SLO error budget exhausted for job_completion_rate"
          description: |
            Job completion SLO error budget is exhausted (< 25% remaining).
            This indicates the system is at or exceeding error tolerance.

            Target: 99.5% ± 0.5%
            Current: {{ $value | humanizePercentage }}

            Actions:
            1. Scale workers if throughput is increasing
            2. Review recent deployments for issues
            3. Check infrastructure (CPU, memory, disk) for saturation
            4. Prepare incident response if trend continues
            5. Consider feature flag rollback if degradation persists

      # Alert 5: Crash Recovery Success Rate Below Target
      - alert: IdempotencyCrashRecoveryLow
        expr: |
          (
            SELECT CAST(COUNT(*) AS FLOAT) / 1000  -- Assume 1000 jobs monitored
            FROM artifact_jobs
            WHERE state IN ('FINALIZED', 'INDEXED', 'DEDUPED')
            AND updated_at > datetime('now', '-7 days')
          ) < 0.999  -- CRASH_RECOVERY_SUCCESS_TARGET
        for: 5m
        labels:
          severity: critical
          service: idempotency
        annotations:
          summary: "Crash recovery success rate below 99.9%"
          description: |
            Crash recovery success rate has dropped below target.
            This indicates recovery logic may be failing.

            Target: 99.9%
            Current: {{ $value | humanizePercentage }}

            Actions:
            1. Review crash logs for failed reconciliation
            2. Verify reconciler is running on startup
            3. Check artifact_jobs state distribution for anomalies
            4. Manual recovery query:
               SELECT state, COUNT(*) FROM artifact_jobs GROUP BY state
            5. If many jobs in STREAMING state without lease:
               UPDATE artifact_jobs SET state='FAILED' WHERE state='STREAMING' AND lease_owner IS NULL
            6. Review post-deployment for stuck workers

      # Alert 6: Lease Acquisition Latency High
      - alert: IdempotencyLeaseAcquisitionLatencyHigh
        expr: |
          (
            SELECT AVG((updated_at - created_at) * 1000)
            FROM artifact_jobs
            WHERE state IN ('LEASED', 'HEAD_DONE', 'STREAMING', 'FINALIZED')
            AND created_at > datetime('now', '-1 hour')
          ) > 100  -- LEASE_ACQUISITION_P99_TARGET_MS
        for: 5m
        labels:
          severity: warning
          service: idempotency
        annotations:
          summary: "Lease acquisition latency elevated (avg: {{ $value | humanizeDuration }})"
          description: |
            Average lease acquisition latency exceeds 100ms.
            This may indicate database contention or locking issues.

            Target p99: 100ms
            Current avg: {{ $value | humanizeDuration }}

            Actions:
            1. Check SQLite database lock contention
            2. Verify rate limiter is not overly aggressive
            3. Monitor database I/O saturation
            4. Consider enabling WAL mode if not already active
            5. Scale workers down temporarily if contention detected

      # Alert 7: Telemetry Events Not Flowing
      - alert: IdempotencyTelemetryNotFlowing
        expr: |
          (
            SELECT COUNT(*)
            FROM artifact_jobs
            WHERE created_at > datetime('now', '-5 minutes')
          ) = 0 AND on(service) group_left() (
            SELECT 1 WHERE exists(
              SELECT 1 FROM artifact_jobs LIMIT 1
            )
          )
        for: 5m
        labels:
          severity: warning
          service: idempotency
        annotations:
          summary: "No telemetry events in past 5 minutes"
          description: |
            No new artifact_jobs have been created in the past 5 minutes.
            This may indicate the system is idle or stuck.

            Actions:
            1. Verify system is still processing work
            2. Check for deployment/restart in progress
            3. Review application logs for errors
            4. Verify database connectivity

  # SLO Rules (for Grafana SLO Dashboard)
  - name: idempotency_slo_rules
    interval: 30s
    rules:
      # Job Completion Rate
      - record: idempotency:job_completion_rate:5m
        expr: |
          (
            SELECT CAST(SUM(CASE WHEN state IN ('FINALIZED', 'INDEXED', 'DEDUPED') THEN 1 ELSE 0 END) AS FLOAT)
            / CAST(COUNT(*) AS FLOAT)
            FROM artifact_jobs
            WHERE created_at > datetime('now', '-5 minutes')
          )

      # Time to Complete p50
      - record: idempotency:time_to_complete_p50:5m
        expr: |
          (
            SELECT PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY (updated_at - created_at) * 1000)
            FROM artifact_jobs
            WHERE state IN ('FINALIZED', 'INDEXED', 'DEDUPED')
            AND created_at > datetime('now', '-5 minutes')
          )

      # Time to Complete p95
      - record: idempotency:time_to_complete_p95:5m
        expr: |
          (
            SELECT PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY (updated_at - created_at) * 1000)
            FROM artifact_jobs
            WHERE state IN ('FINALIZED', 'INDEXED', 'DEDUPED')
            AND created_at > datetime('now', '-5 minutes')
          )

      # Operation Replay Rate
      - record: idempotency:operation_replay_rate:5m
        expr: |
          (
            SELECT CAST(COUNT(CASE WHEN result_json IS NOT NULL THEN 1 END) AS FLOAT)
            / CAST(COUNT(*) AS FLOAT)
            FROM artifact_ops
            WHERE started_at > datetime('now', '-5 minutes')
          )

      # Stale Leases Count
      - record: idempotency:stale_leases:1m
        expr: |
          (
            SELECT COUNT(*)
            FROM artifact_jobs
            WHERE lease_until < datetime('now') AND lease_owner IS NOT NULL
          )

      # Active Workers (jobs with active leases)
      - record: idempotency:active_workers:1m
        expr: |
          (
            SELECT COUNT(DISTINCT lease_owner)
            FROM artifact_jobs
            WHERE lease_owner IS NOT NULL AND lease_until > datetime('now')
          )
