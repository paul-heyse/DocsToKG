┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃           DOCPARSING RUNNER SCOPE AUDIT — QUICK REFERENCE               ┃
┃                    October 21, 2025 | Status: 75-80%                    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

WHAT'S COMPLETE
═══════════════════════════════════════════════════════════════════════════════

  ✅ Core runner (run_stage, pools, retries, timeouts, resume/force)
     → src/DocsToKG/DocParsing/core/runner.py (713 LOC)

  ✅ Chunk stage fully integrated with runner
     → src/DocsToKG/DocParsing/chunking/runtime.py:1773

  ✅ Embed stage fully integrated with runner
     → src/DocsToKG/DocParsing/embedding/runtime.py:2885

  ✅ Manifest & telemetry infrastructure (atomic JSONL, FileLock)
     → src/DocsToKG/DocParsing/telemetry.py

  ✅ Progress tracking (p50/p95 latency, per-stage stats)
     → Built into run_stage() in core/runner.py


WHAT'S MISSING (5 GAPS)
═══════════════════════════════════════════════════════════════════════════════

  ❌ Gap #1: Manifest Sink Abstraction
     → 4 hours | LOW risk
     → Create core/manifest_sink.py (unified protocol)

  ❌ Gap #2: DocTags Stage Integration [BLOCKING]
     → 6 hours | MEDIUM risk
     → Make pdf_main() and html_main() use run_stage()

  ❌ Gap #3: Missing CLI Flags
     → 3 hours | LOW risk
     → Add --retries, --timeout-s, --error-budget, --max-queue

  ❌ Gap #4: Runner Unit Tests
     → 8 hours | LOW risk
     → test_runner_semantics.py (timeout, retries, SJF)
     → test_runner_e2e.py (all 3 stages)

  ❌ Gap #5: Documentation
     → 6 hours | LOW risk
     → Architecture guide, new stage guide, CLI reference, migration notes


IMPLEMENTATION ROADMAP
═══════════════════════════════════════════════════════════════════════════════

  Phase 1 (Days 1-2):   Gap #1 + Gap #3 foundation
  Phase 2 (Days 3-4):   Gap #2 (DocTags runner integration)
  Phase 3 (Days 5-6):   Gap #4 (tests)
  Phase 4 (Day 7):      Gap #5 (docs)
  Phase 5 (Day 8+):     Review, merge, rollout

  Total Effort: ~27 hours
  One Engineer: 7-10 calendar days


ACCEPTANCE CRITERIA
═══════════════════════════════════════════════════════════════════════════════

  Functional:
    □ All 3 stages use run_stage() (gap #2 complete)
    □ Manifest rows have consistent base fields
    □ Resume/force/timeout/retries/error-budget work identically

  Quality:
    □ 100% type-safe (mypy clean)
    □ 0 ruff violations
    □ ≥95% test coverage for runner
    □ All existing tests passing

  Documentation:
    □ Architecture guide complete
    □ CLI reference complete
    □ CHANGELOG updated


RISK MATRIX
═══════════════════════════════════════════════════════════════════════════════

  Gap #1 (Manifest Sink):     LOW  → Backward-compatible wrapper
  Gap #2 (DocTags Runner):    MED  → Requires corpus parity test
  Gap #3 (CLI Flags):         LOW  → Additive only
  Gap #4 (Tests):             LOW  → Isolated unit tests
  Gap #5 (Docs):              LOW  → Living documentation


KEY FILES
═══════════════════════════════════════════════════════════════════════════════

  Original Design:
    DO NOT DELETE docs-instruct/.../DocParsing-Runner-config-review.md

  Current Implementation:
    src/DocsToKG/DocParsing/core/runner.py

  Detailed Audit:
    /home/paul/DocsToKG/DOCPARSING_RUNNER_SCOPE_AUDIT.md
    /home/paul/DocsToKG/DOCPARSING_RUNNER_SCOPE_VALIDATION.md


SCOPE BY NUMBERS
═══════════════════════════════════════════════════════════════════════════════

  Total proposed items:    33
  Currently complete:      25 (75%)
  Critical blocking:        2 (D4, D7 — DocTags runner)
  High-priority gaps:      10 (G, H, I items)
  Optional enhancements:    4 (SJF, verbose, etc.)

  Lines of code deployed:  4,100+ (core runner + 2 stages)
  Tests already written:   ~100 (per-stage integration)
  Tests to add:            ~650 (runner unit + e2e)


NEXT ACTIONS
═══════════════════════════════════════════════════════════════════════════════

  1. Review audit documents:
     → DOCPARSING_RUNNER_SCOPE_AUDIT.md (comprehensive)
     → DOCPARSING_RUNNER_SCOPE_VALIDATION.md (matrix view)

  2. Prioritize gaps (all recommended):
     → Gap #1 (foundation) → Gap #2 (blocking) → Gaps #3-5 (parallel)

  3. Assign work (estimate 7-10 days, one engineer):
     → Phase 1: Foundation (7 hrs)
     → Phase 2: DocTags integration (6 hrs)
     → Phase 3: Testing (8 hrs)
     → Phase 4: Docs (6 hrs)

  4. Execute & validate:
     → Corpus parity test for Gap #2
     → All tests passing
     → Code review

  5. Deploy:
     → Merge to main
     → Tag release
     → Deprecation notice for legacy loops


BLOCKING DEPENDENCIES
═══════════════════════════════════════════════════════════════════════════════

  Gap #2 (DocTags runner) requires Gap #1 (Manifest Sink) first
  → Manifests must be unified before DocTags integration

  All others can proceed in parallel:
  → Gap #3 (CLI flags) independent
  → Gap #4 (tests) independent
  → Gap #5 (docs) independent


PRODUCTION READINESS
═══════════════════════════════════════════════════════════════════════════════

  Chunk stage:   ✅ PRODUCTION READY (100% runner integrated)
  Embed stage:   ✅ PRODUCTION READY (100% runner integrated)
  DocTags stage: ⚠️ LEGACY (not using runner yet)
  Overall:       ⚠️ 75-80% → Proceed with gaps 1-5 to reach 100%

┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
