name: Wheels CI (self-hosted)

on:
    workflow_dispatch:

jobs:
    build:
        runs-on: [self-hosted, DocsToKG-wheels]
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_EC2_METADATA_DISABLED: "true"
            AWS_S3_FORCE_PATH_STYLE: "true"
            AWS_DEFAULT_REGION: "us-east-1"
        steps:
            - uses: actions/checkout@v4
              with:
                  lfs: false
                  fetch-depth: 1
              env:
                  GIT_LFS_SKIP_SMUDGE: "1"

            - uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Download wheels from MinIO (local)
              run: |
                  pipx install awscli
                  mkdir -p ci/wheels
                  aws s3 sync "s3://docs2kg-wheels/cp313" ci/wheels \
                    --endpoint-url "http://127.0.0.1:9000" --no-progress

            - name: Verify checksums (optional)
              run: |
                  if [ -f ci/wheels/SHA256SUMS ]; then
                    (cd ci/wheels && sha256sum -c SHA256SUMS)
                  fi

            # Ensure build tools are present so -e .[gpu12x] can install without PyPI
            - name: Prep build tooling
              run: |
                  python -m pip install -U pip setuptools wheel packaging

            - name: Install deps from local wheelhouse (GPU)
              env:
                  PIP_NO_BUILD_ISOLATION: "1" # use the setuptools we just installed
              run: |
                  # belt & suspenders if the runner has a sticky global install
                  python -m pip uninstall -y cupy cupy-cuda12x || true
                  python -m pip install --no-cache-dir --no-index --find-links=ci/wheels \
                    -r requirements.gpu.txt     # <- use the GPU requirements file

            - name: CuPy guard
              run: |
                  python - <<'PY'
                  import importlib.util
                  spec = importlib.util.find_spec("cupy")
                  assert spec and spec.origin and spec.origin.endswith("__init__.py"), f"Bad CuPy install: {spec}"
                  print("CuPy OK:", spec.origin)
                  PY
