# 1. Module: download

This reference documents the DocsToKG module ``DocsToKG.OntologyDownload.download``.

Ontology Download Utilities

This module houses secure download helpers that implement rate limiting,
content validation, and resumable transfers for ontology documents. It works
in concert with resolver planning to ensure that downloaded artifacts respect
size limits and are safe for downstream document processing.

## 1. Functions

### `_log_memory(logger, event)`

*No documentation available.*

### `sanitize_filename(filename)`

Sanitize filenames to prevent directory traversal and unsafe characters.

Args:
filename: Candidate filename provided by an upstream service.

Returns:
Safe filename compatible with local filesystem storage.

### `validate_url_security(url)`

Validate URLs to avoid SSRF and insecure schemes.

Args:
url: URL returned by a resolver for ontology download.

Returns:
HTTPS URL safe for downstream download operations.

Raises:
ConfigError: If the URL uses an insecure scheme or resolves to private addresses.

### `sha256_file(path)`

Compute the SHA-256 digest for the provided file.

Args:
path: Path to the file whose digest should be calculated.

Returns:
Hexadecimal SHA-256 checksum string.

### `extract_zip_safe(zip_path, destination)`

Extract a ZIP archive while preventing path traversal.

Args:
zip_path: Path to the ZIP file to extract.
destination: Directory where extracted files should be stored.
logger: Optional logger for emitting extraction telemetry.

Returns:
List of extracted file paths.

Raises:
ConfigError: If the archive contains unsafe paths or is missing.

### `_get_bucket(host, http_config, service)`

*No documentation available.*

### `download_stream()`

Download ontology content with caching, retries, and hash validation.

Args:
url: URL of the ontology document to download.
destination: Target file path for the downloaded content.
headers: HTTP headers forwarded to the download request.
previous_manifest: Manifest metadata from a prior run, used for caching.
http_config: Download configuration containing timeouts and limits.
cache_dir: Directory where intermediary cached files are stored.
logger: Logger adapter for structured download telemetry.
expected_media_type: Expected Content-Type for validation, if known.
service: Logical service identifier for per-service rate limiting.

Returns:
DownloadResult describing the final artifact and metadata.

Raises:
ConfigError: If validation fails, limits are exceeded, or HTTP errors occur.

### `consume(self, tokens)`

Consume tokens from the bucket, sleeping until capacity is available.

Args:
tokens: Number of tokens required for the current download request.

Returns:
None

### `_preliminary_head_check(self, url, session)`

Probe the origin with HEAD to audit headers before downloading.

Args:
url: Fully qualified download URL resolved by the planner.
session: Prepared requests session used for outbound calls.

Returns:
Tuple ``(content_type, content_length)`` extracted from response
headers. Each element is ``None`` when the origin omits it.

Raises:
ConfigError: If the origin reports a payload larger than the
configured ``max_download_size_gb`` limit.

### `_validate_media_type(self, actual_content_type, expected_media_type, url)`

Validate that the received ``Content-Type`` header is acceptable.

Args:
actual_content_type: Raw header value reported by the origin server.
expected_media_type: MIME type declared by resolver metadata.
url: Download URL logged when mismatches occur.

Returns:
None

### `__call__(self, url, output_file, pooch_logger)`

Stream ontology content to disk while enforcing download policies.

Args:
url: Secure download URL resolved by the planner.
output_file: Temporary filename managed by pooch during download.
pooch_logger: Logger instance supplied by pooch (unused).

Raises:
ConfigError: If download limits are exceeded or filesystem errors occur.
requests.HTTPError: Propagated when HTTP status codes indicate failure.

Returns:
None

## 2. Classes

### `DownloadResult`

Result metadata for a completed download operation.

Attributes:
path: Final file path where the ontology document was stored.
status: Download status (`fresh`, `updated`, or `cached`).
sha256: SHA-256 checksum of the downloaded artifact.
etag: HTTP ETag returned by the upstream server, when available.
last_modified: Upstream last-modified header value if provided.

Examples:
>>> result = DownloadResult(Path("ontology.owl"), "fresh", "deadbeef", None, None)
>>> result.status
'fresh'

### `TokenBucket`

Simple token bucket implementation for per-host and per-service rate limiting.

Attributes:
rate: Token replenishment rate per second.
capacity: Maximum number of tokens the bucket may hold.
tokens: Current token balance available for consumption.
timestamp: Monotonic timestamp of the last refill.
lock: Threading lock protecting bucket state.

Examples:
>>> bucket = TokenBucket(rate_per_sec=2.0, capacity=4.0)
>>> bucket.consume(1.0)  # consumes immediately
>>> isinstance(bucket.tokens, float)
True

### `StreamingDownloader`

Custom downloader to support conditional requests, resume, and caching.

Attributes:
destination: Final location where the ontology will be stored.
custom_headers: HTTP headers supplied by the resolver.
http_config: Download configuration governing retries and limits.
previous_manifest: Manifest from prior runs used for caching.
logger: Logger used for structured telemetry.
status: Final download status (`fresh`, `updated`, or `cached`).
response_etag: ETag returned by the upstream server, if present.
response_last_modified: Last-modified timestamp provided by the server.

Examples:
>>> from pathlib import Path
>>> from DocsToKG.OntologyDownload.config import DownloadConfiguration
>>> downloader = StreamingDownloader(
...     destination=Path("/tmp/ontology.owl"),
...     headers={},
...     http_config=DownloadConfiguration(),
...     previous_manifest={},
...     logger=logging.getLogger("test"),
... )
>>> downloader.status
'fresh'
