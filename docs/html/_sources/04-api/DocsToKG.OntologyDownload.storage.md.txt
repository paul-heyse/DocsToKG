# 1. Module: storage

This reference documents the DocsToKG module ``DocsToKG.OntologyDownload.storage``.

Storage backends for ontology artifacts.

The refactored ontology downloader expects durable, versioned storage that can
support dry-run planning, streaming normalization, and version pruning. This
module centralizes local and optional remote (fsspec) storage implementations,
ensuring that metadata such as latest version markers and reclaimed space
reports remain consistent with the openspec storage management requirements.

## 1. Functions

### `_safe_identifiers(ontology_id, version)`

Return identifiers sanitized for filesystem usage.

### `_directory_size(path)`

Return the total size in bytes for all regular files under ``path``.

### `get_storage_backend()`

Instantiate the storage backend based on environment configuration.

### `prepare_version(self, ontology_id, version)`

Return a working directory prepared for the given ontology version.

Args:
ontology_id: Identifier of the ontology being downloaded.
version: Version string representing the in-flight download.

Returns:
Path to a freshly prepared directory tree ready for population.

### `ensure_local_version(self, ontology_id, version)`

Ensure the requested version is present locally and return its path.

Args:
ontology_id: Identifier whose version must be present.
version: Version string that should exist on local storage.

Returns:
Path to the local directory containing the requested version.

### `available_versions(self, ontology_id)`

Return sorted version identifiers currently stored for an ontology.

Args:
ontology_id: Identifier whose known versions are requested.

Returns:
Sorted list of version strings recognised by the backend.

### `available_ontologies(self)`

Return sorted ontology identifiers known to the backend.

Returns:
Alphabetically sorted list of ontology identifiers the backend can
service.

### `finalize_version(self, ontology_id, version, local_dir)`

Persist the working directory after validation succeeds.

Args:
ontology_id: Identifier of the ontology that completed processing.
version: Version string associated with the finalized artifacts.
local_dir: Directory containing the validated ontology payload.

Returns:
None.

### `version_path(self, ontology_id, version)`

Return the canonical storage path for ``ontology_id``/``version``.

Args:
ontology_id: Identifier of the ontology being queried.
version: Version string for which a canonical path is needed.

Returns:
Path pointing to the storage location for the requested version.

### `delete_version(self, ontology_id, version)`

Delete a stored version returning the number of bytes reclaimed.

Args:
ontology_id: Identifier whose version should be removed.
version: Version string targeted for deletion.

Returns:
Number of bytes reclaimed by removing the stored version.

### `set_latest_version(self, ontology_id, version)`

Update the latest version marker for operators and CLI tooling.

Args:
ontology_id: Identifier whose latest marker requires updating.
version: Version string to record as the active release.

Returns:
None.

### `_version_dir(self, ontology_id, version)`

*No documentation available.*

### `prepare_version(self, ontology_id, version)`

Create the working directory structure for a download run.

Args:
ontology_id: Identifier of the ontology being processed.
version: Canonical version string for the ontology.

Returns:
Path to the prepared base directory containing ``original``,
``normalized``, and ``validation`` subdirectories.

### `ensure_local_version(self, ontology_id, version)`

Ensure a local workspace exists for ``ontology_id``/``version``.

Args:
ontology_id: Identifier whose workspace must exist.
version: Version string that should map to a directory.

Returns:
Path to the local directory for the ontology version.

### `available_versions(self, ontology_id)`

Return sorted versions already present for an ontology.

Args:
ontology_id: Identifier whose stored versions should be listed.

Returns:
Sorted list of version strings found under the storage root.

### `available_ontologies(self)`

Return ontology identifiers discovered under ``root``.

Returns:
Sorted list of ontology identifiers available locally.

### `finalize_version(self, ontology_id, version, local_dir)`

Finalize a local version directory (no-op for purely local storage).

Args:
ontology_id: Identifier that finished processing.
version: Version string associated with the processed ontology.
local_dir: Directory containing the ready-to-serve ontology.

Returns:
None.

### `version_path(self, ontology_id, version)`

Return the local storage directory for the requested version.

Args:
ontology_id: Identifier being queried.
version: Version string whose storage path is needed.

Returns:
Path pointing to the stored ontology version.

### `delete_version(self, ontology_id, version)`

Delete a stored ontology version returning reclaimed bytes.

Args:
ontology_id: Identifier whose stored version should be removed.
version: Version string targeted for deletion.

Returns:
Number of bytes reclaimed by removing the version directory.

Raises:
OSError: Propagated if filesystem deletion fails.

### `set_latest_version(self, ontology_id, version)`

Update symlink and marker file indicating the latest version.

Args:
ontology_id: Identifier whose latest marker should be updated.
version: Version string to record as the latest processed build.

Returns:
None.

### `_remote_version_path(self, ontology_id, version)`

*No documentation available.*

### `available_versions(self, ontology_id)`

Return versions aggregated from local cache and remote storage.

### `available_ontologies(self)`

Return ontology identifiers available locally or remotely.

### `ensure_local_version(self, ontology_id, version)`

Mirror a remote ontology version into the local cache when absent.

### `finalize_version(self, ontology_id, version, local_dir)`

Upload the finalized local directory to the remote store.

### `delete_version(self, ontology_id, version)`

Delete both local and remote copies of a stored version.

## 2. Classes

### `StorageBackend`

Protocol describing the operations required by the downloader pipeline.

Attributes:
root_path: Canonical base path that implementations expose for disk
storage.  Remote-only backends can synthesize this attribute for
instrumentation purposes.

Examples:
>>> class MemoryBackend(StorageBackend):
...     root_path = Path("/tmp")  # pragma: no cover - illustrative stub
...     def prepare_version(self, ontology_id: str, version: str) -> Path:
...         ...

### `LocalStorageBackend`

Storage backend that keeps ontology artifacts on the local filesystem.

Attributes:
root: Base directory that stores ontology versions grouped by identifier.

Examples:
>>> backend = LocalStorageBackend(LOCAL_ONTOLOGY_DIR)
>>> backend.available_ontologies()
[]

### `FsspecStorageBackend`

Hybrid storage backend that mirrors artifacts to an fsspec location.
