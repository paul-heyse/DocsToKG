"""DocParsing core facade exposing shared utilities across stages."""

from __future__ import annotations

from DocsToKG.DocParsing.env import (
    data_chunks,
    data_doctags,
    data_html,
    data_manifests,
    data_pdfs,
    data_vectors,
    detect_data_root,
    ensure_model_environment,
    ensure_qwen_dependencies,
    ensure_qwen_environment,
    ensure_splade_dependencies,
    ensure_splade_environment,
    expand_path,
    init_hf_env,
    looks_like_filesystem_path,
    prepare_data_root,
    resolve_hf_home,
    resolve_model_root,
    resolve_pdf_model_path,
    resolve_pipeline_path,
)
from DocsToKG.DocParsing.io import (
    atomic_write,
    build_jsonl_split_map,
    compute_chunk_uuid,
    compute_content_hash,
    dedupe_preserve_order,
    iter_doctags,
    iter_jsonl,
    iter_jsonl_batches,
    iter_manifest_entries,
    jsonl_append_iter,
    jsonl_load,
    jsonl_save,
    load_manifest_index,
    make_hasher,
    manifest_append,
    quarantine_artifact,
    relative_path,
    resolve_hash_algorithm,
)
from DocsToKG.DocParsing.logging import (
    StructuredLogger,
    get_logger,
    log_event,
    manifest_log_failure,
    manifest_log_skip,
    manifest_log_success,
    summarize_manifest,
)

from .batching import Batcher
from .cli import (
    CLI_DESCRIPTION,
    COMMANDS,
    CommandHandler,
    chunk,
    doctags,
    embed,
    main,
    manifest,
    plan,
    run_all,
    token_profiles,
    _Command,
)
from .cli_utils import CLIOption, build_subcommand, detect_mode
from .concurrency import acquire_lock, find_free_port, set_spawn_or_warn
from .discovery import (
    DEFAULT_CAPTION_MARKERS,
    DEFAULT_HEADING_MARKERS,
    compute_relative_doc_id,
    compute_stable_shard,
    derive_doc_id_and_chunks_path,
    derive_doc_id_and_doctags_path,
    derive_doc_id_and_vectors_path,
    iter_chunks,
    load_structural_marker_config,
    load_structural_marker_profile,
)
from .http import DEFAULT_HTTP_TIMEOUT, get_http_session, normalize_http_timeout
from .manifest import ResumeController, should_skip_output
from .models import (
    BM25Stats,
    ChunkResult,
    ChunkTask,
    ChunkWorkerConfig,
    DEFAULT_SERIALIZER_PROVIDER,
    DEFAULT_TOKENIZER,
    QwenCfg,
    SpladeCfg,
    UUID_NAMESPACE,
)

__all__ = [
    "detect_data_root",
    "data_doctags",
    "data_chunks",
    "data_vectors",
    "data_manifests",
    "data_pdfs",
    "data_html",
    "expand_path",
    "resolve_hf_home",
    "resolve_model_root",
    "find_free_port",
    "atomic_write",
    "iter_doctags",
    "iter_chunks",
    "jsonl_load",
    "jsonl_save",
    "jsonl_append_iter",
    "iter_jsonl",
    "iter_jsonl_batches",
    "build_jsonl_split_map",
    "get_logger",
    "log_event",
    "Batcher",
    "compute_chunk_uuid",
    "quarantine_artifact",
    "manifest_append",
    "manifest_log_failure",
    "manifest_log_skip",
    "manifest_log_success",
    "compute_content_hash",
    "make_hasher",
    "resolve_hash_algorithm",
    "load_manifest_index",
    "acquire_lock",
    "set_spawn_or_warn",
    "derive_doc_id_and_vectors_path",
    "derive_doc_id_and_doctags_path",
    "derive_doc_id_and_chunks_path",
    "compute_relative_doc_id",
    "compute_stable_shard",
    "should_skip_output",
    "relative_path",
    "init_hf_env",
    "ensure_model_environment",
    "ensure_splade_dependencies",
    "ensure_qwen_dependencies",
    "ensure_splade_environment",
    "ensure_qwen_environment",
    "DEFAULT_HTTP_TIMEOUT",
    "normalize_http_timeout",
    "get_http_session",
    "iter_manifest_entries",
    "summarize_manifest",
    "ResumeController",
    "UUID_NAMESPACE",
    "BM25Stats",
    "SpladeCfg",
    "QwenCfg",
    "ChunkWorkerConfig",
    "ChunkTask",
    "ChunkResult",
    "DEFAULT_HEADING_MARKERS",
    "DEFAULT_CAPTION_MARKERS",
    "DEFAULT_SERIALIZER_PROVIDER",
    "DEFAULT_TOKENIZER",
    "dedupe_preserve_order",
    "CLIOption",
    "build_subcommand",
    "looks_like_filesystem_path",
    "resolve_pdf_model_path",
    "prepare_data_root",
    "resolve_pipeline_path",
    "load_structural_marker_profile",
    "load_structural_marker_config",
    "detect_mode",
    "CommandHandler",
    "_Command",
    "CLI_DESCRIPTION",
    "main",
    "run_all",
    "chunk",
    "embed",
    "doctags",
    "token_profiles",
    "plan",
    "manifest",
]

__all__.extend([
    "StructuredLogger",
])
